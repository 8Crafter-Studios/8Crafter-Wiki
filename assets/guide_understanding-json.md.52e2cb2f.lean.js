import{_ as s,r as n,c as o,a,e,o as r}from"./404.md.3cd1439e.js";const _='{"title":"Understanding JSON","description":"","frontmatter":{"title":"Understanding JSON","category":"Extra","nav_order":1,"prefix":"a. "},"headers":[{"level":2,"title":"Valid JSON","slug":"valid-json"},{"level":2,"title":"Data Structures","slug":"data-structures"},{"level":3,"title":"Arrays","slug":"arrays"},{"level":3,"title":"Objects","slug":"objects"},{"level":2,"title":"JSON Structure","slug":"json-structure"},{"level":2,"title":"Troubleshooting Examples","slug":"troubleshooting-examples"}],"relativePath":"guide/understanding-json.md","lastUpdated":1642050268194}',p={},c=e('',17),i=e(`__VP_STATIC_START__<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
	<span class="token property">&quot;a_list_of_integers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;is_json_cool&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>We need to separate each key-value pair with a comma.</p><p>We call the key-value pairs of an object as its <em>child</em> or as being <em>inside</em> the object.</p><h2 id="json-structure" tabindex="-1">JSON Structure <a class="header-anchor" href="#json-structure" aria-hidden="true">#</a></h2><p>In Minecraft, JSON files always begin with an <em>object</em>, which you can remember is two curly brackets:<code>{}</code>. We call this the <em>top level object</em>. We write our code <em>inside</em> of this object, in the form of key-value pairs.</p><p>Here is an example of a simple json file, used for Minecraft addons:</p>__VP_STATIC_END__`,6),l=e(`__VP_STATIC_START__<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
	<span class="token property">&quot;format_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.12.0&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;animations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;animation.car.wheel_spin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;loop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
			<span class="token property">&quot;animation_length&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
			<span class="token property">&quot;bones&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;front_wheels&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;rotation&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query.modified_distance_moved * -30&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token property">&quot;back_wheels&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;rotation&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query.modified_distance_moved * -30&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Take a careful look at the format. You will see that the entire structure is built out the data-structures that we have already learned. If you want to practice your json skills, try to answer these questions:</p><ul><li>How many keys are there in the <em>top level object</em>. Can you name them?</li><li>What is the value of <code>format_version</code>?</li><li>What <code>structure</code> is the value for: <code>&quot;loop&quot;: true</code>?</li></ul><h2 id="troubleshooting-examples" tabindex="-1">Troubleshooting Examples <a class="header-anchor" href="#troubleshooting-examples" aria-hidden="true">#</a></h2><hr><p>You wrote: <code>&quot;format_version&quot;: 1.12</code></p><p>They said: &quot;<em>The value for format_version is the wrong type. It should be a string.</em></p><p>Remember that <code>type</code> means one of the structures: <code>String</code>, <code>Int</code>, <code>Float</code>, <code>Array</code> or <code>Object</code>. If we examine our code, we will see that we put <code>format_version</code> to an <code>Int</code>, instead of a <code>String</code>. We can fix this problem by adding quotes around the <code>1.12</code>.</p><hr><p>You wrote: <code>[1 2 5 6]</code></p><p>They said: &quot;<em>Your array is missing commas.</em>&quot;</p><p>Remember that array elements need to be separated by commas. Your array should look like this: <code>[1, 2, 5, 6]</code></p><hr><p>They said: <em>&quot;You accidentally put the format version inside your description. It should go outside at the top level</em>&quot;.</p><p>This means that the key-value pair for <code>&quot;format_version&quot;</code> as a <em>child</em> of the description. You should copy/paste the key-value pair out from the description object, and place it at the top level.</p>__VP_STATIC_END__`,15);function u(d,h,m,b,k,f){const t=n("CodeHeader");return r(),o("div",null,[c,a(t),i,a(t),l])}var g=s(p,[["render",u]]);export{_ as __pageData,g as default};
