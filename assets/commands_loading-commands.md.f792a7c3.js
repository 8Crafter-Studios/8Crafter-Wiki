import{_ as l,c as i,a as s,w as o,b as e,d as n,e as t,r,o as d}from"./404.md.25b6a67d.js";var c="/assets/images/commands/loading-commands/loading-commands-showcase.gif";const E='{"title":"Loading Commands","description":"","frontmatter":{"title":"Loading Commands","mention":["MedicalJewel105","Hatchibombotar"]},"headers":[{"level":2,"title":"Player Join","slug":"player-join"},{"level":2,"title":"First World Load","slug":"first-world-load"}],"relativePath":"commands/loading-commands.md"}',p={},u=e("p",null,"Sometimes when writing functions or creating addons it is useful to be able to run commands on a players first join or on the first time a world has been loaded. We will go through both.",-1),_=e("p",null,[e("img",{src:c,alt:""})],-1),m=e("h2",{id:"player-join",tabindex:"-1"},[n("Player Join "),e("a",{class:"header-anchor",href:"#player-join","aria-hidden":"true"},"#")],-1),h=e("p",null,[n("In order to check if a new player has joined the world we need to run commands every tick. For this we use "),e("a",{href:"/commands/mcfunction.html#creating-tick-json"},"tick.json"),n(".")],-1),b=e("p",null,"Here is what your file could look like:",-1),g=n("BP/functions/tick.json"),f=t(`<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
    <span class="token property">&quot;values&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;load_commands&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>load_commands</code> is what our function that is going to check for new players will be called.</p>`,2),w=n("BP/functions/load_commands.mcfunction"),v=t(`<div class="language-"><pre><code>msg @a[tag=!joined] Welcome
tag @a add joined
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>In this example, the player gets a welcome message. You can swap it out for anything you&#39;d like that targets a player without the joined tag such as teleporting them somewhere, giving them something or spawning an entity.</p><h2 id="first-world-load" tabindex="-1">First World Load <a class="header-anchor" href="#first-world-load" aria-hidden="true">#</a></h2><p>Unlike entities, worlds can not be applied tags. Instead we have to use scoreboards. Because of that, it is a bit more complicated.</p>`,4),k=n("BP/functions/tick.json"),T=t(`<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
    <span class="token property">&quot;values&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;load_check&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,1),y=n("BP/functions/load_check.mcfunction"),P=e("div",{class:"language-"},[e("pre",null,[e("code",null,`execute @a[c=1] ~ ~ ~ function load_commands
`)]),e("div",{class:"line-numbers-wrapper"},[e("span",{class:"line-number"},"1"),e("br")])],-1),j=e("p",null,[n("In this example, we are running it from one player, this could be from any "),e("strong",null,"entity"),n(" though.")],-1),C=n("BP/functions/load_commands.mcfunction"),S=t(`<div class="language-"><pre><code>scoreboard objectives add loaded dummy
scoreboard players add global loaded 0
scoreboard players operation @s loaded = global loaded
execute @s[scores={loaded=0}] ~ ~ ~ say The world is loaded!
scoreboard players set global loaded 1
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The function above does appear rather complicated but it is actually quite simple. The first two lines make sure that a scoreboard called <code>loaded</code> is created and that a player on it called <code>global</code> exists. The third line copies the value that the <code>global</code> player has. The fourth line runs commands once the world is loaded and the last line sets loaded to 1.</p>`,2);function x(A,I,V,q,B,N){const a=r("CodeHeader");return d(),i("div",null,[u,_,m,h,b,s(a,null,{default:o(()=>[g]),_:1}),f,s(a,null,{default:o(()=>[w]),_:1}),v,s(a,null,{default:o(()=>[k]),_:1}),T,s(a,null,{default:o(()=>[y]),_:1}),P,j,s(a,null,{default:o(()=>[C]),_:1}),S])}var H=l(p,[["render",x]]);export{E as __pageData,H as default};
