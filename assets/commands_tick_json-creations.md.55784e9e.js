import{_ as l,c as r,a as n,w as o,b as e,d as a,e as t,r as d,o as i}from"./404.md.a43789c1.js";const I='{"title":"Useful tick.json Creations","description":"","frontmatter":{"title":"Useful tick.json Creations","mentions":["MedicalJewel105","Hatchibombotar"],"category":"General","tags":["Normal"]},"headers":[{"level":2,"title":"Death Detection","slug":"death-detection"},{"level":2,"title":"Looping Timer","slug":"looping-timer"},{"level":2,"title":"Hello World","slug":"hello-world"},{"level":2,"title":"First World Load","slug":"first-world-load"}],"relativePath":"commands/tick_json-creations.md"}',c={},p=e("p",null,[a("On this page you can find some of the tick.json creations by our community. You can read about tick.json "),e("a",{href:"/commands/mcfunction.html#creating-tick-json"},"here")],-1),u=e("h2",{id:"death-detection",tabindex:"-1"},[a("Death Detection "),e("a",{class:"header-anchor",href:"#death-detection","aria-hidden":"true"},"#")],-1),h=e("p",null,[a("Death detection with commands might be useful because it don't use "),e("code",null,"player.json")],-1),_=a("BP/functions/death_detection.mcfunction"),m=t(`<div class="language-"><pre><code>tag @a add dead
tag @e[type=player] remove dead
execute @a[tag=dead, tag=!last_dead] ~ ~ ~ summon hatchibombotar:grave
tag @a[tag=dead, tag=!last_dead] add last_dead
tag @a[tag=!dead, tag=last_dead] remove last_dead
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This works because @a targets all players whereas <code>@e[type=player]</code> only targets alive players. You can do whatever you want with that summoned entity. Credit to <a href="https://github.com/Hatchibombotar" target="_blank" rel="noopener noreferrer">Hatchibombotar</a>.</p><h2 id="looping-timer" tabindex="-1">Looping Timer <a class="header-anchor" href="#looping-timer" aria-hidden="true">#</a></h2><p>Here you can find timer that executes function with name <code>my_function</code> on players with 10 sec delay.</p>`,4),b=a("BP/functions/timer.mcfunction"),f=t(`<div class="language-"><pre><code># Setup
scoreboard objectives add timer dummy
# Loop
scoreboard players add @a timer 1
# Main
execute @a[scores={timer=200}] ~~~ function my_function
# Timer Update
scoreboard players set @a[scores={timer=200..}] timer 0
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Note that the order of loop and timer update is important.</p><h2 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world" aria-hidden="true">#</a></h2><p>This function tellraws something to every player, who joined the game for the first time. It also has a 4 seconds delay so world is fully loaded.</p>`,4),g=a("BP/functions/hello_world.mcfunction"),w=t(`<div class="language-"><pre><code>scoreboard objectives add hello_world dummy
scoreboard players set @a[tag=!hello_world] hello_world 81
tag @a add hello_world
scoreboard players add @a[scores={hello_world=!0}] hello_world -1
execute @a[scores={hello_world=1}] ~~~ tellraw @s {&quot;rawtext&quot;:[{&quot;text&quot;:&quot;Did you know that MJ105 made this Hello World function?&quot;}]}
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="first-world-load" tabindex="-1">First World Load <a class="header-anchor" href="#first-world-load" aria-hidden="true">#</a></h2><p>Unlike entities, worlds can not be applied tags. Instead we have to use scoreboards. Because of that, it is a bit more complicated.</p>`,3),y=a("BP/functions/load_check.mcfunction"),v=e("div",{class:"language-"},[e("pre",null,[e("code",null,`execute @a[c=1] ~ ~ ~ function load_commands
`)]),e("div",{class:"line-numbers-wrapper"},[e("span",{class:"line-number"},"1"),e("br")])],-1),T=e("p",null,[a("Here, we are running it from one player, this could be from any "),e("strong",null,"entity"),a(" though.")],-1),x=a("BP/functions/load_commands.mcfunction"),C=t(`<div class="language-"><pre><code>scoreboard objectives add loaded dummy
scoreboard players add global loaded 0
scoreboard players operation @s loaded = global loaded
execute @s[scores={loaded=0}] ~ ~ ~ say The world is loaded!
scoreboard players set global loaded 1
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The above function seems rather complicated, but it is actually quite simple. The first two lines check that a scoreboard called <code>loaded</code> has been created and that a player called <code>global</code> exists on it. The third line copies the value that the player <code>global</code> has. The fourth line executes commands after the world is loaded, and the last line sets the value of loaded to 1.</p>`,2);function k(P,S,j,A,V,D){const s=d("CodeHeader");return i(),r("div",null,[p,u,h,n(s,null,{default:o(()=>[_]),_:1}),m,n(s,null,{default:o(()=>[b]),_:1}),f,n(s,null,{default:o(()=>[g]),_:1}),w,n(s,null,{default:o(()=>[y]),_:1}),v,T,n(s,null,{default:o(()=>[x]),_:1}),C])}var N=l(c,[["render",k]]);export{I as __pageData,N as default};
