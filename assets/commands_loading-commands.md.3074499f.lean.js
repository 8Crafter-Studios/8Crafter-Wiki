import{_ as l,r as t,c as i,a,w as o,b as e,d as n,o as r}from"./404.md.28d3cf91.js";var c="/assets/images/commands/loading-commands/loading-commands-showcase.gif";const E='{"title":"Loading Commands","description":"","frontmatter":{"title":"Loading Commands","mention":["MedicalJewel105","Hatchibombotar"]},"headers":[{"level":2,"title":"Player Join","slug":"player-join"},{"level":2,"title":"World load","slug":"world-load"}],"relativePath":"commands/loading-commands.md","lastUpdated":1641927970747}',d={},u=e("p",null,"Sometimes when writing functions or creating addons it is useful to be able to run commands on a players first join or on the first time a world has been loaded. We will go through both.",-1),p=e("p",null,[e("img",{src:c,alt:""})],-1),m=e("h2",{id:"player-join",tabindex:"-1"},[n("Player Join "),e("a",{class:"header-anchor",href:"#player-join","aria-hidden":"true"},"#")],-1),h=e("p",null,[n("In order to check if a new player has joined the world we need to run commands every tick. For this we use "),e("a",{href:"/commands/mcfunction.html#creating-tick-json"},"tick.json"),n(".")],-1),b=e("p",null,"Here is what your file could look like:",-1),_=n("BP/functions/tick.json"),g=e("div",{class:"language-json line-numbers-mode"},[e("pre",null,[e("code",null,[e("span",{class:"token punctuation"},"{"),n(`
    `),e("span",{class:"token property"},'"values"'),e("span",{class:"token operator"},":"),n(),e("span",{class:"token punctuation"},"["),n(`
        `),e("span",{class:"token string"},'"load_commands"'),n(`
    `),e("span",{class:"token punctuation"},"]"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers-wrapper"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br")])],-1),f=e("p",null,[e("code",null,"load_commands"),n(" is what our function that is going to check for new players will be called.")],-1),w=n("BP/functions/load_commands.mcfunction"),k=e("div",{class:"language-"},[e("pre",null,[e("code",null,`msg @a[tag=!joined] Welcome
tag @a add joined
`)]),e("div",{class:"line-numbers-wrapper"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),y=e("p",null,"In this example, the player gets a welcome message. You can swap it out for anything you'd like that targets a player without the joined tag such as teleporting them somewhere, giving them something or spawning an entity.",-1),v=e("h2",{id:"world-load",tabindex:"-1"},[n("World load "),e("a",{class:"header-anchor",href:"#world-load","aria-hidden":"true"},"#")],-1),j=e("p",null,"Unlike entities, worlds can not be applied tags. Instead we have to use scoreboards. Because of that, it is a bit more complicated.",-1),x=n("BP/functions/tick.json"),B=e("div",{class:"language-json line-numbers-mode"},[e("pre",null,[e("code",null,[e("span",{class:"token punctuation"},"{"),n(`
    `),e("span",{class:"token property"},'"values"'),e("span",{class:"token operator"},":"),n(),e("span",{class:"token punctuation"},"["),n(`
        `),e("span",{class:"token string"},'"load_check"'),n(`
    `),e("span",{class:"token punctuation"},"]"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers-wrapper"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br")])],-1),P=n("BP/functions/load_check.mcfunction"),C=e("div",{class:"language-"},[e("pre",null,[e("code",null,`execute @a[c=1] ~ ~ ~ function load_commands
`)]),e("div",{class:"line-numbers-wrapper"},[e("span",{class:"line-number"},"1"),e("br")])],-1),T=e("p",null,[n("In this example, we are running it from one player, this could be from any "),e("strong",null,"entity"),n(" though.")],-1),H=n("BP/functions/load_commands.mcfunction"),I=e("div",{class:"language-"},[e("pre",null,[e("code",null,`scoreboard objectives add loaded dummy
scoreboard players add global loaded 0
scoreboard players operation @s loaded = global loaded
execute @s[scores={loaded=0}] ~ ~ ~ say The world is loaded!
scoreboard players set global loaded 1
`)]),e("div",{class:"line-numbers-wrapper"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br")])],-1),W=e("p",null,[n("The function above does appear rather complicated but it is actually quite simple. The first two lines make sure that a scoreboard called "),e("code",null,"loaded"),n(" is created and that a player on it called "),e("code",null,"global"),n(" exists. The third line copies the value that the "),e("code",null,"global"),n(" player has. The fourth line runs commands once the world is loaded and the last line sets loaded to 1.")],-1);function $(J,N,V,L,U,q){const s=t("CodeHeader");return r(),i("div",null,[u,p,m,h,b,a(s,null,{default:o(()=>[_]),_:1}),g,f,a(s,null,{default:o(()=>[w]),_:1}),k,y,v,j,a(s,null,{default:o(()=>[x]),_:1}),B,a(s,null,{default:o(()=>[P]),_:1}),C,T,a(s,null,{default:o(()=>[H]),_:1}),I,W])}var F=l(d,[["render",$]]);export{E as __pageData,F as default};
