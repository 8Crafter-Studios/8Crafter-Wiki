import{_ as i,r as o,c as l,a as n,w as d,e as s,b as e,d as t,o as r}from"./404.md.6928b058.js";const q=`{"title":"Text and Localization","description":"","frontmatter":{"title":"Text and Localization","mention":["ThijsHankelMC","SirLich","aexer0e","MedicalJewel105","Luthorius"]},"headers":[{"level":2,"title":"Lang-Codes","slug":"lang-codes"},{"level":3,"title":"The Structure","slug":"the-structure"},{"level":3,"title":"Creating Lang-Codes","slug":"creating-lang-codes"},{"level":3,"title":"Overriding vanilla Lang-Codes","slug":"overriding-vanilla-lang-codes"},{"level":3,"title":"Undefined Lang-Codes","slug":"undefined-lang-codes"},{"level":3,"title":"What's with the %s?","slug":"what-s-with-the-s"},{"level":3,"title":"Useful Vanilla-Overrides","slug":"useful-vanilla-overrides"},{"level":3,"title":"Where to use them","slug":"where-to-use-them"},{"level":2,"title":"Localization","slug":"localization"},{"level":3,"title":"Vanilla Languages","slug":"vanilla-languages"},{"level":2,"title":"Custom Languages","slug":"custom-languages"},{"level":3,"title":"Languages","slug":"languages"},{"level":3,"title":"Language Names","slug":"language-names"}],"relativePath":"concepts/text-and-translations.md","lastUpdated":1639425416392}`,c={},u=s('',8),h=s(`__VP_STATIC_START__<div class="language-"><pre><code>langcode.wiki.custom.1=A Custom Lang-Code for the Wiki!
langcode.wiki.custom.2=A Custom Lang-Code for the Wiki!
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The Lang-Code itself is typically formatted in a similar fashion to the above</p><h3 id="overriding-vanilla-lang-codes" tabindex="-1">Overriding vanilla Lang-Codes <a class="header-anchor" href="#overriding-vanilla-lang-codes" aria-hidden="true">#</a></h3><p>It is completely allowed and encouraged to override vanilla language strings. For example, if you want to rename <code>Iron Ingots</code> to <code>Iron Rods</code>, you can do so within .lang files:</p><p><code>item.iron_ingot.name=Iron Rod</code></p><h3 id="undefined-lang-codes" tabindex="-1">Undefined Lang-Codes <a class="header-anchor" href="#undefined-lang-codes" aria-hidden="true">#</a></h3><p>Sometimes, undefined lang codes will show up in-game. When this happens, they will show the entire lang code instead of a string. A widespread place where you will see this is with an entity name, and in your hotbar/inventory:</p><p><code>entity.wiki:my_entity.name</code></p><p>When you see similar codes, you can simply copy them down into your <code>.lang</code> files. For example:</p><p><code>entity.wiki:my_entity.name=MY VERY COOL ENTITY</code></p><p>Blocks are the same as entities, just replacing <code>entity.</code> with <code>tile.</code>, though the 1.16.100+ items translation are different:</p><p><code>item.wiki:my_item=My Item</code></p><p>You will see these because of the way Minecraft handles the subjects, entities, blocks, and items alike all have their own identifiers in Behaviour Packs, so specific lang codes based off of that are generated for these, as they are required, unlike generic text. Booting up the game is the easiest way of finding out what the required Lang-Codes are for your addon.</p><h3 id="what-s-with-the-s" tabindex="-1">What&#39;s with the %s? <a class="header-anchor" href="#what-s-with-the-s" aria-hidden="true">#</a></h3><p>Some lang-codes contain the concept of arguments. These are things the game passes into your lang-code. You represent these arguments with \`%s. These normally occur in dynamic strings, like commands:</p><p>Example: (<code>/say</code>) <code>chat.type.announcement=[%s] %s</code></p><p>In the example above, the first <code>%s</code> is replaced by the entity&#39;s name doing the <code>/say</code>. The second <code>%s</code> is replaced by the string after they say.</p><h3 id="useful-vanilla-overrides" tabindex="-1">Useful Vanilla-Overrides <a class="header-anchor" href="#useful-vanilla-overrides" aria-hidden="true">#</a></h3><p>Remove the <code>[Entity Name]</code> from <code>/say</code> commands: <code>chat.type.announcement=%2</code></p><h3 id="where-to-use-them" tabindex="-1">Where to use them <a class="header-anchor" href="#where-to-use-them" aria-hidden="true">#</a></h3><p>Lang-codes can be used in any of the following places:</p><ul><li>pack name</li><li>pack description</li><li>entity name</li><li>item name</li><li>block name</li><li>books</li><li>signs</li><li>tellraw commands</li></ul><p>As you can see, lang-codes can be used pretty much wherever you write text in your addon.</p><p>When using lang codes in addons, you can usually use the string.</p><p>In game (signs, books, etc), use <a href="/commands/tellraw.html">tellraw</a>: <code>{&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;my.lang.code&quot;}]}</code></p><p>You can also create a text directory and .lang files in Behaviour Packs, but only to define pack.title and pack.description for the BP.</p><h2 id="localization" tabindex="-1">Localization <a class="header-anchor" href="#localization" aria-hidden="true">#</a></h2><p>Now you know about .lang files in general, you can look into internationalisation of you text. Translations that show depending on what language the player is using. In the <code>rp/texts</code> directory, there are quite a number of .lang files, each representing and containing a different language, and their name is based on the language and nation, for example en_GB (English, Great Britain), en_US (English, United States), de_DE (Deutsch, Deutschland), etc. All of the Lang-Codes are present in each individual .lang file, and contain text related to the language stated in the files name.</p><p>For example, you could state this:</p>__VP_STATIC_END__`,29),g=t("rp/texts/en_US.lang"),p=e("div",{class:"language-json line-numbers-mode"},[e("pre",null,[e("code",null,[t("langcode.wiki"),e("span",{class:"token operator"},":"),t(`my_text.words=My Block
`)])]),e("div",{class:"line-numbers-wrapper"},[e("span",{class:"line-number"},"1"),e("br")])],-1),m=e("p",null,"And also this:",-1),_=t("rp/texts/de_DE.lang"),f=s(`__VP_STATIC_START__<div class="language-json line-numbers-mode"><pre><code>langcode.wiki<span class="token operator">:</span>my_text.words=Meinblock
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>The result would be that anyone using English (United States) would see the text &quot;My Block&quot; when <code>langcode.wiki:my_text.words</code> is used, but also anyone wih German selected as their language would see &quot;Meinblock&quot;.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you do not plan on creating translations for your packs, it is advised that if you are working in English, you create both a <code>en.GB.lang</code> <em>and</em> <code>en.NA.lang</code>, with identical content</p></div><h3 id="vanilla-languages" tabindex="-1">Vanilla Languages <a class="header-anchor" href="#vanilla-languages" aria-hidden="true">#</a></h3><table><thead><tr><th>.lang File</th><th>Language</th><th>Country</th></tr></thead><tbody><tr><td>id_ID</td><td>Indonesian</td><td>Indonesia</td></tr><tr><td>da_DK</td><td>Danish</td><td>Denmark</td></tr><tr><td>de_DE</td><td>German</td><td>Germany</td></tr><tr><td>en_GB</td><td>English</td><td>Great Britain</td></tr><tr><td>en_US</td><td>English</td><td>North America</td></tr><tr><td>es_ES</td><td>Spanish</td><td>Spain</td></tr><tr><td>es_MX</td><td>Mexican Spanish</td><td>Mexico</td></tr><tr><td>fr_CA</td><td>Canadian French</td><td>Canada</td></tr><tr><td>fr_FR</td><td>French</td><td>France</td></tr><tr><td>it_IT</td><td>Italian</td><td>Italy</td></tr><tr><td>hu_HU</td><td>Hungarian</td><td>Hungary</td></tr><tr><td>nl_NL</td><td>Dutch</td><td>Netherlands</td></tr><tr><td>nb_NO</td><td>Bokm\xE5l</td><td>Norway</td></tr><tr><td>pl_PL</td><td>Polish</td><td>Poland</td></tr><tr><td>pt_BR</td><td>Brazilian Portuguese</td><td>Brazil</td></tr><tr><td>pt_PT</td><td>Portuguese</td><td>Portugal</td></tr><tr><td>sk_SK</td><td>Slovak</td><td>Slovakia</td></tr><tr><td>fi_FI</td><td>Finnish</td><td>Finland</td></tr><tr><td>sv_SE</td><td>Swedish</td><td>Sweden</td></tr><tr><td>tr_TR</td><td>Turkish</td><td>Turkey</td></tr><tr><td>cs_CZ</td><td>Czech</td><td>Czech Republic</td></tr><tr><td>el_GR</td><td>Greek</td><td>Greece</td></tr><tr><td>bg_BG</td><td>Bulgarian</td><td>Bulgaria</td></tr><tr><td>ru_RU</td><td>Russian</td><td>Russia</td></tr><tr><td>uk_UA</td><td>Ukrainian</td><td>Ukraine</td></tr><tr><td>ja_JP</td><td>Japanese</td><td>Japan</td></tr><tr><td>zh_CN</td><td>Chinese (Simplified)</td><td>China</td></tr><tr><td>zh_TW</td><td>Chinese (Traditional)</td><td>Taiwan</td></tr><tr><td>ko_KR</td><td>Korean</td><td>Korea</td></tr></tbody></table><h2 id="custom-languages" tabindex="-1">Custom Languages <a class="header-anchor" href="#custom-languages" aria-hidden="true">#</a></h2><p>You may have noticed that there are 2 files in <code>rp/texts</code> that are not <code>.lang</code>. One is <code>languages.json</code> and the other <code>language_names.json</code>, and these can be used to add more languages to the game, being selectable in the &quot;languages&quot; tab of the in-game settings when the Resource Pack is applied globaly, in addition to the 29 pre-existing vanilla languages.</p><p>For the following examples, lets assume that we have 2 fully functional .lang files, one names <code>xx_XX.lang</code>, and anothe <code>yy_YY.lang</code></p><h3 id="languages" tabindex="-1">Languages <a class="header-anchor" href="#languages" aria-hidden="true">#</a></h3><p>Simply just an array of <code>.lang</code> files for Minecraft to register as available languages.</p>__VP_STATIC_END__`,10),y=t("rp/texts/languages.json"),b=s(`__VP_STATIC_START__<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">[</span>
  <span class="token string">&quot;xx_XX&quot;</span>
  <span class="token string">&quot;yy_YY&quot;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="language-names" tabindex="-1">Language Names <a class="header-anchor" href="#language-names" aria-hidden="true">#</a></h3><p>Another array, but this time defines the name to show for the languages</p>__VP_STATIC_END__`,3),v=t("rp/texts/language_names.json"),w=s(`__VP_STATIC_START__<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span> <span class="token string">&quot;xx_XX&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;New Language (Custom Language #1)&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&quot;yy_YY&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wiki-Speak (Custom Language #2)&quot;</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is good practice whenever using a custom language, to make sure that if you disable the Resource Pack which it is stored in, that you change the selected language to a vanilla one, else Minecraft <strong>will</strong> crash.</p></div>__VP_STATIC_END__`,2);function k(x,T,C,S,L,I){const a=o("CodeHeader");return r(),l("div",null,[u,n(a),h,n(a,null,{default:d(()=>[g]),_:1}),p,m,n(a,null,{default:d(()=>[_]),_:1}),f,n(a,null,{default:d(()=>[y]),_:1}),b,n(a,null,{default:d(()=>[v]),_:1}),w])}var P=i(c,[["render",k]]);export{q as __pageData,P as default};
