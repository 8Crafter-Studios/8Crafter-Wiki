import{_ as e,r as t,c as o,a,e as n,o as p}from"./404.md.82d2252b.js";const w='{"title":"Creating addons with Programming","description":"","frontmatter":{"title":"Creating addons with Programming"},"headers":[{"level":2,"title":"When should you automate a task?","slug":"when-should-you-automate-a-task"},{"level":2,"title":"How to get started with programming?","slug":"how-to-get-started-with-programming"},{"level":2,"title":"Creating sound_definitions.json","slug":"creating-sound-definitions-json"},{"level":3,"title":"Picking the Topic","slug":"picking-the-topic"},{"level":3,"title":"Inspect the Format","slug":"inspect-the-format"},{"level":3,"title":"Creating a Python Script","slug":"creating-a-python-script"},{"level":3,"title":"Creating a processing function","slug":"creating-a-processing-function"},{"level":3,"title":"Outputting proper json","slug":"outputting-proper-json"},{"level":3,"title":"Using create_sound_definition","slug":"using-create-sound-definition"},{"level":3,"title":"Structuring our folder","slug":"structuring-our-folder"},{"level":3,"title":"String processing","slug":"string-processing"},{"level":3,"title":"Sorry, I will write more soon!","slug":"sorry-i-will-write-more-soon"}],"relativePath":"meta/addon-programming.md","lastUpdated":1641228452232}',i={},r=n('',16),l=n(`__VP_STATIC_START__<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
	<span class="token property">&quot;dragon.roar&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ui&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;sounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sounds/dragon/roar&quot;</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;dragon.wing_flap&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ui&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;sounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sounds/dragon/wing_flap&quot;</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>The next step, is to look at the file, and select a <em>chunk</em>. Our goal will be to generate this chunk programmatically, based on some <em>input</em>. In this case, our chunk is a single sound_definition:</p>__VP_STATIC_END__`,2),c=n(`__VP_STATIC_START__<div class="language-json line-numbers-mode"><pre><code><span class="token property">&quot;$folder.$sound:&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$category&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;sounds/$folder/$sound&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Now, we can annotate this JSON with the <em>variables</em> we want to inject. In other words, the content that we want to change programmatically. Notice how some variables are used multiple times. I&#39;m using <code>$var</code> to annotate the JSON, but this is just for information-gathering. We will replace this with proper python soon.</p><h3 id="creating-a-python-script" tabindex="-1">Creating a Python Script <a class="header-anchor" href="#creating-a-python-script" aria-hidden="true">#</a></h3><p>Now is the time to create your script. I use a <code>projects</code> folder, following this <a href="/meta/version-control.html">version control tutorial</a>. That means I will be placing my script inside <code>projects/scripts</code>, but please place it anywhere convenient.</p><p>You can test your python script by quickly adding a <code>hello_world</code> print and running it. At this point, I also paste in my prepared JSON snippet, as a comment:\\</p><div class="language-py line-numbers-mode"><pre><code>
<span class="token comment"># &quot;$folder.$sound:&quot;: {</span>
<span class="token comment">#     &quot;category&quot;: &quot;$category&quot;,</span>
<span class="token comment">#     &quot;sounds&quot;: [</span>
<span class="token comment">#         &quot;sounds/$folder/$sound&quot;</span>
<span class="token comment">#     ]</span>
<span class="token comment"># }</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="creating-a-processing-function" tabindex="-1">Creating a processing function <a class="header-anchor" href="#creating-a-processing-function" aria-hidden="true">#</a></h3><p>I think it is always a good idea to work with functions. Functions are a nice abstraction and allow us to break out work into meaningful chunks. Since we have three variables, let&#39;s create a function that takes three variables. For testing, we can print these variables out:</p><div class="language-py line-numbers-mode"><pre><code><span class="token keyword">def</span> <span class="token function">create_sound_definition</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> sound<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Folder: &quot;</span> <span class="token operator">+</span> folder<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Sound: &quot;</span> <span class="token operator">+</span> sound<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Category: &quot;</span> <span class="token operator">+</span> category<span class="token punctuation">)</span>

create_found_definition<span class="token punctuation">(</span><span class="token string">&quot;Example Folder&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A sound for testing&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Some category :)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="outputting-proper-json" tabindex="-1">Outputting proper json <a class="header-anchor" href="#outputting-proper-json" aria-hidden="true">#</a></h3><p>Now that we have our process function and test case, let&#39;s update the function to print actual JSON. We will be using the <code>.format</code> specifier for python strings, as well as multiline strings. These are hugely helpful for generating JSON! Please read up on these concepts if you aren&#39;t familiar.</p><div class="language-py line-numbers-mode"><pre><code><span class="token keyword">def</span> <span class="token function">create_sound_definition</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> sound<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
        &quot;{0}.{2}:&quot;: {
            &quot;category&quot;: &quot;{2}&quot;,
            &quot;sounds&quot;: [
                &quot;sounds/{0}/{1}&quot;
            ]
        }
    &quot;&quot;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> sound<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">)</span>

create_found_definition<span class="token punctuation">(</span><span class="token string">&quot;Example Folder&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A sound for testing&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Some category :)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Instead of printing nonsense, we are printing a JSON object with values where we want them!</p><h3 id="using-create-sound-definition" tabindex="-1">Using create_sound_definition <a class="header-anchor" href="#using-create-sound-definition" aria-hidden="true">#</a></h3><p>Our goal is to look into the file system and make calls to <code>create_sound_definition</code>. Let&#39;s make a new function, called <code>create_sound_definitions</code> which will handle this task. We will need to import some python modules.</p><div class="language-py line-numbers-mode"><pre><code><span class="token keyword">import</span> os

<span class="token keyword">def</span> <span class="token function">create_sound_definitions</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    paths <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> path <span class="token keyword">in</span> paths<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>This code will generate a list of paths. If we pass in the sounds folder containing these files:</p><ul><li><code>sounds/dragon/roar.mp4</code></li><li><code>sounds/dragon/wing_flap.mp4</code></li></ul><p>The result would be:</p><ul><li><code>dragon/roar.mp4</code></li><li><code>dragon/wing_flap.mp4</code></li></ul><h3 id="structuring-our-folder" tabindex="-1">Structuring our folder <a class="header-anchor" href="#structuring-our-folder" aria-hidden="true">#</a></h3><p>Now, let&#39;s go into our sounds folder, and order our files so that all the information we need can be pulled from the folder directly. Let&#39;s use this format:</p><p><code>sounds/category/folder/sound</code></p><p>For example:</p><p><code>sounds/ui/dragon/roar</code></p><h3 id="string-processing" tabindex="-1">String processing <a class="header-anchor" href="#string-processing" aria-hidden="true">#</a></h3><p>We can use string processing to gather all the information we need out of <code>create_sound_definitions</code> strings.</p><div class="language-py line-numbers-mode"><pre><code>test <span class="token operator">=</span> <span class="token string">&quot;ui/dragon/roar.mp4&quot;</span>
split <span class="token operator">=</span> test<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
category <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
folder <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
sound <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="sorry-i-will-write-more-soon" tabindex="-1">Sorry, I will write more soon! <a class="header-anchor" href="#sorry-i-will-write-more-soon" aria-hidden="true">#</a></h3>__VP_STATIC_END__`,29);function u(d,h,g,m,k,b){const s=t("CodeHeader");return p(),o("div",null,[r,a(s),l,a(s),c])}var y=e(i,[["render",u]]);export{w as __pageData,y as default};
