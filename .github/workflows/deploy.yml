name: Deploy
on:
  # Allows you to run this workflow manually from the Actions tab or through HTTP API
  workflow_dispatch:

  push:
    branches:
      - wiki

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy ðŸš€
    env:
      GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: package-lock.json
          node-version-file: .nvmrc

      - name: Install Project ðŸ”§
        run: npm install
      - name: Fix Permissions for ESLint
        run: chmod +x ./node_modules/.bin/eslint
      - name: Install Dependencies
        run: npm ci
      - name: Debug ESLint Installation
        run: ls -l ./node_modules/.bin

      - name: Debug ESLint
        run: |
          echo "Node.js version:"
          node -v
          echo "npm version:"
          npm -v
          echo "Where is eslint?"
          npx eslint --version

      - name: Check Linting ðŸ”Ž
        run: sudo npm run lint

      - name: Generate Page Link List
        run: npx tsx generate_page_link_list_md.ts
      - name: Commit changes for generated page link list
        if: ${{ success() }}
        uses: EndBug/add-and-commit@v9
        with:
            add: '["docs/andexdb/page-link-list.md", "docs/main/page-link-list.md"]'
            pull: "--rebase --autostash ."
            message: "saved updated page link list files"
            default_author: github_actions
      - name: Upload generated page link list artifacts
        uses: actions/upload-artifact@v4
        with:
            path: |
              docs/andexdb/page-link-list.md
              docs/main/page-link-list.md

      - name: Check Build ðŸ”§
        run: npm run build
      - name: Deploy (main) to GitHub Pages
        # You may pin to the exact commit or the version.
        # uses: JamesIves/github-pages-deploy-action@15de0f09300eea763baee31dff6c6184995c5f6a
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        with:
          # This option defaults to the repository scoped GitHub Token.  However if you need more permissions for things such as deploying to another repository, you can add a Personal Access Token (PAT) here.  This should be stored in the `secrets / with` menu **as a secret**.
          # We recommend using a service account with the least permissions necessary and when generating a new PAT that you select the least permission scopes required.
          # [Learn more about creating and using encrypted secrets here.](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)

          token: ${{ secrets.CI_TOKEN }}
          # This is the branch you wish to deploy to, for example gh-pages or docs.
          branch: generated
          # The folder in your repository that you want to deploy. If your build script compiles into a directory named build you would put it here. Folder paths cannot have a leading / or ./. If you wish to deploy the root directory you can place a . here.
          folder: docs/main/.vitepress/dist
          # If you would like to push the contents of the deployment folder into a specific directory on the deployment branch you can specify it here.
          target-folder: main
          # If you need to customize the commit message for an integration you can do so.
          # commit-message: # optional
          # If your project generates hashed files on build you can use this option to automatically delete them from the target folder on the deployment branch with each deploy. This option is on by default and can be toggled off by setting it to false.
          # clean: # optional, default is true
          # If you need to use clean but you would like to preserve certain files or folders you can use this option. This should contain each pattern as a single line in a multiline string.
          # clean-exclude: # optional
          # Do not actually push back, but use `--dry-run` on `git push` invocations instead.
          # dry-run: # optional
          # Whether to force-push and overwrite any existing deployment. Setting this to false will attempt to rebase simultaneous deployments. This option is on by default and can be toggled off by setting it to false.
          # force: # optional, default is true
          # Allows you to customize the name that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the name in the GitHub context, followed by the name of the action.
          # git-config-name: # optional
          # Allows you to customize the email that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the email in the GitHub context, followed by a generic noreply GitHub email.
          # git-config-email: # optional
          # Allows you to specify a different repository path so long as you have permissions to push to it. This should be formatted like so: JamesIves/github-pages-deploy-action
          # repository-name: # optional
          # Add a tag to the commit, this can be used like so: 'v0.1'. Only works when 'dry-run' is not used.
          # tag: # optional
          # This option can be used if you'd prefer to have a single commit on the deployment branch instead of maintaining the full history.
          # single-commit: # optional
          # Silences the action output preventing it from displaying git messages.
          # silent: # optional
      - name: Deploy (andexdb) to GitHub Pages
        # You may pin to the exact commit or the version.
        # uses: JamesIves/github-pages-deploy-action@15de0f09300eea763baee31dff6c6184995c5f6a
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        with:
          # This option defaults to the repository scoped GitHub Token.  However if you need more permissions for things such as deploying to another repository, you can add a Personal Access Token (PAT) here.  This should be stored in the `secrets / with` menu **as a secret**.
          # We recommend using a service account with the least permissions necessary and when generating a new PAT that you select the least permission scopes required.
          # [Learn more about creating and using encrypted secrets here.](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)

          token: ${{ secrets.CI_TOKEN }}
          # This is the branch you wish to deploy to, for example gh-pages or docs.
          branch: generated
          # The folder in your repository that you want to deploy. If your build script compiles into a directory named build you would put it here. Folder paths cannot have a leading / or ./. If you wish to deploy the root directory you can place a . here.
          folder: docs/andexdb/.vitepress/dist
          # If you would like to push the contents of the deployment folder into a specific directory on the deployment branch you can specify it here.
          target-folder: andexdb
          # If you need to customize the commit message for an integration you can do so.
          # commit-message: # optional
          # If your project generates hashed files on build you can use this option to automatically delete them from the target folder on the deployment branch with each deploy. This option is on by default and can be toggled off by setting it to false.
          # clean: # optional, default is true
          # If you need to use clean but you would like to preserve certain files or folders you can use this option. This should contain each pattern as a single line in a multiline string.
          # clean-exclude: # optional
          # Do not actually push back, but use `--dry-run` on `git push` invocations instead.
          # dry-run: # optional
          # Whether to force-push and overwrite any existing deployment. Setting this to false will attempt to rebase simultaneous deployments. This option is on by default and can be toggled off by setting it to false.
          # force: # optional, default is true
          # Allows you to customize the name that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the name in the GitHub context, followed by the name of the action.
          # git-config-name: # optional
          # Allows you to customize the email that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the email in the GitHub context, followed by a generic noreply GitHub email.
          # git-config-email: # optional
          # Allows you to specify a different repository path so long as you have permissions to push to it. This should be formatted like so: JamesIves/github-pages-deploy-action
          # repository-name: # optional
          # Add a tag to the commit, this can be used like so: 'v0.1'. Only works when 'dry-run' is not used.
          # tag: # optional
          # This option can be used if you'd prefer to have a single commit on the deployment branch instead of maintaining the full history.
          # single-commit: # optional
          # Silences the action output preventing it from displaying git messages.
          # silent: # optional

      #- name: Deploy ðŸš€
      #  uses: JamesIves/github-pages-deploy-action@4.1.0
      #  with:
      #      branch: generated
      #      folder: docs/.vitepress/dist

      - name: Bully someone into fixing it
        if: ${{ failure() }}
        uses: Bedrock-OSS/discord-bully@v1.0.8
        with:
          webhook: https://canary.discord.com/api/webhooks/${{ secrets.WEBHOOK_ID }}/${{ secrets.WEBHOOK_TOKEN }}
          tenorGifApiKey: ${{ secrets.TENOR_GIF_API_KEY }}
          failMessage: I blame %author% <:PE_PandaBonk:885395101877166110>
          failTitle: "Wiki deployment failed!"
          failAuthor: "You messed up"
          gifFailQuery: fail
          successTitle: "Wiki deployment succeeded!"
          successMessage: Thank you, %author%! <:PE_PandaInLove:885395799029194853>
          gifSuccessQuery: success
          successAuthor: "You did it"
          failed: "true"

      - name: Send a message if previous build failed
        if: ${{ success() }}
        uses: Bedrock-OSS/discord-bully@v1.0.8
        with:
          webhook: https://canary.discord.com/api/webhooks/${{ secrets.WEBHOOK_ID }}/${{ secrets.WEBHOOK_TOKEN }}
          tenorGifApiKey: ${{ secrets.TENOR_GIF_API_KEY }}
          failMessage: I blame %author% <:PE_PandaBonk:885395101877166110>
          failTitle: "Wiki deployment failed!"
          failAuthor: "You messed up"
          gifFailQuery: fail
          successTitle: "Wiki deployment succeeded!"
          successMessage: Thank you, %author%! <:PE_PandaInLove:885395799029194853>
          gifSuccessQuery: success
          successAuthor: "You did it"
          failed: "false"
